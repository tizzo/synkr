// Generated by CoffeeScript 1.4.0
var config, options, request, watchr, winston;

var request = require('request'),
  watchr = require('watchr'),
  winston = require('winston');

// Just requiring this allows us to use a yaml config
// file rather than JSON via require calls.
require('js-yaml');

// Load our configuration from the yaml file.
var config = require('./config');

/**
 * Gets a flat array of configured paths to watch.
 */
var getPathsToWatchArray = function(config) {
  var paths = [];
  for (path in config.pathsToWatch) {
    paths.push(path);
  }
  return paths;
}

var processChange = function(changeType, filePath) {
  winston.info(changeType, filePath);
  respondToChange(changeType, filePath);
}


var respondToChange = function(changeType, filePath) {
  conf = findOptionDefinition(filePath);
  // TODO: Wihtout using -r (which we don't want to do because this is
  // targetted) we'll need to separately do a mkdir -p
  var options = conf.commandOptions.join(' ');
  var remoteSystem = conf.remoteUser + '@' + conf.remoteHost + ':' + conf.remotePort;
  var remotePath = conf.remotePath;
  command = conf.command + ' ' + options + ' ' + filePath + ' ' + remoteSystem + remotePath;
  console.log(command);
}

var findOptionDefinition = function(filePath) {
  var match = '';
  for (path in config.pathsToWatch) {
    searchPattern = '';
    if (filePath.search(searchPattern) == 0 && path.length > match) {
      match = path;
    }
  }
  if (match == '') {
    throw new Error('Invalid change path');
  }
  return config.pathsToWatch[match];
}

watchr.watch({
  paths: getPathsToWatchArray(config),
  listeners: {
    change: function(changeType, filePath, fileCurrentStat, filePreviousStat) {
      var skip, type, i;
      skip = false;
      for (i = 0; i < config.fileTypesToExclude.length; i++) {
        type = config.fileTypesToExclude[i];
        if (filePath.search("." + type) !== -1) {
          skip = true;
          console.log('extension');
        }
        if (config.ignoreHiddenFiles && filePath.search(/\./) === 0) {
          skip = true;
        }
      }
      if (!skip) {
        processChange(changeType, filePath);
        winston.info(filePath + " " + changeType + "d.");
      }
    }
  },
  next: function(err, watchers) {
    return winston.info(getPathsToWatchArray(config).join(', ') + " now watched for changes.");
  }
});
